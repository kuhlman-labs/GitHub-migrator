name: Terraform Deploy - Dev

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6'
  WORKING_DIR: terraform/environments/dev

jobs:
  terraform-dev:
    name: Terraform ${{ github.event.inputs.action }} - Dev
    runs-on: ubuntu-latest
    environment: dev

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Extract Azure credentials for Terraform
        id: azure-creds
        run: |
          # Extract credentials from AZURE_CREDENTIALS JSON
          CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')
          CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')
          TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')
          SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
          
          # Set as environment variables for Terraform
          echo "ARM_CLIENT_ID=${CLIENT_ID}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${CLIENT_SECRET}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${TENANT_ID}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${SUBSCRIPTION_ID}" >> $GITHUB_ENV
          echo "ARM_USE_CLI=false" >> $GITHUB_ENV

      - name: Create terraform.tfvars from environment secrets
        run: |
          cat > terraform.tfvars <<'TFVARS_EOF'
          # Azure Configuration
          azure_subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          resource_group_name   = "${{ secrets.AZURE_RESOURCE_GROUP }}"

          # Application Configuration
          app_name_prefix = "${{ vars.APP_NAME_PREFIX }}"
          app_service_sku = "${{ vars.APP_SERVICE_SKU }}"
          always_on       = ${{ vars.ALWAYS_ON }}

          # Docker Configuration
          docker_registry_url       = "ghcr.io"
          docker_image_repository   = "${{ github.repository }}"
          docker_image_tag          = "${{ vars.DOCKER_IMAGE_TAG }}"
          docker_registry_username  = "${{ github.actor }}"
          docker_registry_password  = "${{ secrets.GITHUB_TOKEN }}"

          # Source Configuration
          source_type     = "${{ vars.SOURCE_TYPE }}"
          source_base_url = "${{ vars.SOURCE_BASE_URL }}"
          source_token    = "${{ secrets.SOURCE_GITHUB_TOKEN }}"
          TFVARS_EOF
          
          # Add GitHub App configuration if enabled (handles multi-line private key)
          if [ -n "${{ vars.SOURCE_APP_ID }}" ] && [ "${{ vars.SOURCE_APP_ID }}" != "0" ]; then
            echo "" >> terraform.tfvars
            echo "# Source GitHub App Configuration" >> terraform.tfvars
            echo "source_app_id = ${{ vars.SOURCE_APP_ID }}" >> terraform.tfvars
            
            # Use heredoc for multi-line private key
            cat >> terraform.tfvars <<'PRIVATE_KEY_EOF'
          source_app_private_key = <<-EOT
          ${{ secrets.SOURCE_APP_PRIVATE_KEY }}
          EOT
          PRIVATE_KEY_EOF
            
            if [ -n "${{ vars.SOURCE_APP_INSTALLATION_ID }}" ] && [ "${{ vars.SOURCE_APP_INSTALLATION_ID }}" != "0" ]; then
              echo "source_app_installation_id = ${{ vars.SOURCE_APP_INSTALLATION_ID }}" >> terraform.tfvars
            fi
          fi
          
          # Continue with rest of configuration
          cat >> terraform.tfvars <<'TFVARS_EOF'

          # Destination Configuration
          destination_type     = "${{ vars.DESTINATION_TYPE }}"
          destination_base_url = "${{ vars.DESTINATION_BASE_URL }}"
          destination_token    = "${{ secrets.DEST_GITHUB_TOKEN }}"

          # Migration Configuration
          migration_workers                      = ${{ vars.MIGRATION_WORKERS }}
          migration_poll_interval_seconds        = ${{ vars.MIGRATION_POLL_INTERVAL_SECONDS }}
          migration_post_migration_mode          = "${{ vars.MIGRATION_POST_MIGRATION_MODE }}"
          migration_dest_repo_exists_action      = "${{ vars.MIGRATION_DEST_REPO_EXISTS_ACTION }}"
          migration_visibility_public_repos      = "${{ vars.MIGRATION_VISIBILITY_PUBLIC_REPOS }}"
          migration_visibility_internal_repos    = "${{ vars.MIGRATION_VISIBILITY_INTERNAL_REPOS }}"

          # Logging Configuration
          logging_level  = "${{ vars.LOGGING_LEVEL }}"
          logging_format = "${{ vars.LOGGING_FORMAT }}"

          # Auth Configuration
          auth_enabled                     = ${{ vars.AUTH_ENABLED }}
          auth_github_oauth_client_id      = "${{ secrets.AUTH_GITHUB_OAUTH_CLIENT_ID }}"
          auth_github_oauth_client_secret  = "${{ secrets.AUTH_GITHUB_OAUTH_CLIENT_SECRET }}"
          auth_callback_url                = "${{ vars.AUTH_CALLBACK_URL }}"
          auth_frontend_url                = "${{ vars.AUTH_FRONTEND_URL }}"
          auth_session_secret              = "${{ secrets.AUTH_SESSION_SECRET }}"
          auth_session_duration_hours      = ${{ vars.AUTH_SESSION_DURATION_HOURS }}

          # CORS Configuration
          cors_allowed_origins = ${{ vars.CORS_ALLOWED_ORIGINS }}

          # Tags
          tags = {
            Project     = "GitHub Migrator"
            Environment = "${{ vars.ENVIRONMENT_NAME }}"
            ManagedBy   = "Terraform"
            DeployedBy  = "GitHub Actions"
          }
          TFVARS_EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan'
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve

      - name: Get Outputs
        if: github.event.inputs.action == 'apply'
        run: |
          echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**App Service URL:** $(terraform output -raw app_service_url)" >> $GITHUB_STEP_SUMMARY
          echo "**App Service Name:** $(terraform output -raw app_service_name)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Update GitHub secret \`AZURE_APP_SERVICE_NAME_DEV\` with: \`$(terraform output -raw app_service_name)\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Run the Build workflow to create container image" >> $GITHUB_STEP_SUMMARY
          echo "3. Run Deploy Dev workflow to deploy the application" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          rm -f terraform.tfvars
          az logout

