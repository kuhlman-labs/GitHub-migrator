name: Continuous Integration

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  # Backend: Go tests and linting
  backend-ci:
    name: Backend CI (Go)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files need formatting:"
            gofmt -s -l .
            exit 1
          fi

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run golangci-lint
        run: golangci-lint run --timeout=5m --skip-dirs=web
        continue-on-error: true

      - name: Download git-sizer for tests
        run: |
          chmod +x scripts/download-git-sizer.sh
          ./scripts/download-git-sizer.sh

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: backend
          fail_ci_if_error: false
        continue-on-error: true

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: coverage.html

      - name: Check test coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 30" | bc -l) )); then
            echo "⚠️  Warning: Coverage is below 30%"
          else
            echo "✅ Coverage is acceptable"
          fi

  # Frontend: React/TypeScript tests and linting
  frontend-ci:
    name: Frontend CI (React/TypeScript)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Build frontend
        run: npm run build

      - name: Check build output
        run: |
          if [ -d "dist" ]; then
            echo "✅ Build successful - dist directory created"
            ls -lah dist/
          else
            echo "❌ Build failed - dist directory not found"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: web/dist
          retention-days: 7

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Run Gosec Security Scanner (Go)
        run: |
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          gosec -fmt json -out gosec-report.json ./... || true
        continue-on-error: true

      - name: Upload Gosec report
        uses: actions/upload-artifact@v4
        with:
          name: gosec-report
          path: gosec-report.json
        continue-on-error: true

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Check for known vulnerabilities (Go)
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
        continue-on-error: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check for known vulnerabilities (npm)
        working-directory: web
        run: |
          npm audit --audit-level=high
        continue-on-error: true

  # Build validation (ensure Docker build works)
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: github-migrator:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Test Docker image
        run: |
          docker images github-migrator:test
          echo "✅ Docker image built successfully"

  # Summary job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, security-scan, dependency-check, docker-build-test]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend CI | ${{ needs.backend-ci.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend CI | ${{ needs.frontend-ci.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build Test | ${{ needs.docker-build-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.backend-ci.result }}" == "failure" ]] || \
             [[ "${{ needs.frontend-ci.result }}" == "failure" ]] || \
             [[ "${{ needs.docker-build-test.result }}" == "failure" ]]; then
            echo "❌ CI pipeline failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ CI pipeline passed" >> $GITHUB_STEP_SUMMARY
          fi

