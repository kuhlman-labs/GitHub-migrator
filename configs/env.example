# GitHub Migration Server - Environment Variables Template
# Copy this file to .env in the project root and fill in your values

# =============================================================================
# Source Repository System Configuration
# =============================================================================

# Source system type: github, gitlab, or azuredevops
GHMIG_SOURCE_TYPE=github
SOURCE_TYPE=github

# --- GitHub Source Configuration ---
# Source GitHub Token (GitHub Enterprise Server or GitHub.com)
# Required scopes: repo, read:org, read:user
# This PAT will be used for migration operations
GITHUB_SOURCE_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
GHMIG_SOURCE_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Source GitHub Base URL
GITHUB_SOURCE_URL=https://github.company.com/api/v3
GHMIG_SOURCE_BASE_URL=https://github.company.com/api/v3

# Source GitHub GraphQL URL
GITHUB_SOURCE_GRAPHQL_URL=https://github.company.com/api/graphql

# --- GitHub App Source Authentication (Optional) ---
# When configured, the GitHub App token will be used for non-migration operations
# (discovery, profiling, repository listing) while the PAT above handles migrations
# GHMIG_SOURCE_APP_ID=123456
# GHMIG_SOURCE_APP_PRIVATE_KEY=/path/to/private-key.pem
# Or inline PEM:
# GHMIG_SOURCE_APP_PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----\nMIIE...\n-----END RSA PRIVATE KEY-----"
# GHMIG_SOURCE_APP_INSTALLATION_ID=789012

# --- GitLab Source Configuration (if using GitLab) ---
# GITLAB_SOURCE_TOKEN=glpat-xxxxxxxxxxxxxxxxxxxx
# GITLAB_SOURCE_URL=https://gitlab.company.com

# --- Azure DevOps Source Configuration (if using ADO) ---
# ADO_ORGANIZATION=your-org-name
# ADO_SOURCE_TOKEN=your_personal_access_token
# ADO_USERNAME=your-username  # Optional, defaults to token

# =============================================================================
# Destination Repository System Configuration
# =============================================================================

# Destination system type: github or gitlab
GHMIG_DESTINATION_TYPE=github
DESTINATION_TYPE=github

# --- GitHub Destination Configuration ---
# Destination GitHub Token (GitHub Enterprise Cloud or GitHub.com)
# Required scopes: repo, admin:org, workflow
# This PAT will be used for migration operations
GITHUB_DEST_TOKEN=ghp_yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
GHMIG_DESTINATION_TOKEN=ghp_yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy

# Destination GitHub Base URL
GITHUB_DEST_URL=https://api.github.com
GHMIG_DESTINATION_BASE_URL=https://api.github.com

# Destination GitHub GraphQL URL  
GITHUB_DEST_GRAPHQL_URL=https://api.github.com/graphql

# --- GitHub App Destination Authentication (Optional) ---
# When configured, the GitHub App token will be used for non-migration operations
# (discovery, profiling, repository operations) while the PAT above handles migrations
# GHMIG_DESTINATION_APP_ID=123456
# GHMIG_DESTINATION_APP_PRIVATE_KEY=/path/to/private-key.pem
# Or inline PEM:
# GHMIG_DESTINATION_APP_PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----\nMIIE...\n-----END RSA PRIVATE KEY-----"
# GHMIG_DESTINATION_APP_INSTALLATION_ID=789012

# --- GitLab Destination Configuration (if using GitLab) ---
# GITLAB_DEST_TOKEN=glpat-yyyyyyyyyyyyyyyyyyyy
# GITLAB_DEST_URL=https://gitlab.com

# =============================================================================
# Server Configuration
# =============================================================================

# Server port
GHMIG_SERVER_PORT=8080

# =============================================================================
# Database Configuration
# =============================================================================

# Database type: sqlite or postgresql
GHMIG_DATABASE_TYPE=sqlite

# Database DSN (Data Source Name)
# SQLite example:
GHMIG_DATABASE_DSN=./data/migrator.db

# PostgreSQL example:
# GHMIG_DATABASE_DSN=postgres://user:password@localhost:5432/migrator?sslmode=disable

# Alternative: Full PostgreSQL URL
# DATABASE_URL=postgres://migrator_user:secure_password@localhost:5432/migrator?sslmode=require

# =============================================================================
# Logging Configuration
# =============================================================================

# Log level: debug, info, warn, error
GHMIG_LOGGING_LEVEL=info

# Log format: json or text
GHMIG_LOGGING_FORMAT=json

# Log output file
GHMIG_LOGGING_OUTPUT_FILE=./logs/migrator.log

# =============================================================================
# Migration Configuration
# =============================================================================

# Note: Destination organization is determined per-repository via the API/UI
# By default, repositories migrate to the same organization name as the source
# You can override this per-repository using the destination_full_name field

# Number of parallel migration workers (default: 5)
GHMIG_MIGRATION_WORKERS=5

# Polling interval in seconds (default: 30)
GHMIG_MIGRATION_POLL_INTERVAL_SECONDS=30

# Post-migration validation mode: never, production_only, dry_run_only, always (default: production_only)
GHMIG_MIGRATION_POST_MIGRATION_MODE=production_only

# What to do if destination repo exists: fail, skip, delete (default: fail)
GHMIG_MIGRATION_DEST_REPO_EXISTS_ACTION=fail

# Number of parallel discovery workers
GHMIG_DISCOVERY_WORKERS=10

# =============================================================================
# Optional: Advanced Configuration
# =============================================================================

# Migration timeout (default: 60m)
# GHMIG_MIGRATION_TIMEOUT=60m

# Discovery timeout (default: 2h)
# GHMIG_DISCOVERY_TIMEOUT=2h

# GitHub rate limit (default: 5000)
# GHMIG_GITHUB_RATE_LIMIT=5000

# Retry max attempts (default: 5)
# GHMIG_RETRY_MAX_ATTEMPTS=5

# Circuit breaker threshold (default: 5)
# GHMIG_CIRCUIT_BREAKER_THRESHOLD=5

